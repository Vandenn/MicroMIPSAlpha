/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.Converter;
import Model.Database;
import java.awt.Rectangle;
import java.util.Map;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Evan
 */
public class EditMemory extends javax.swing.JFrame {

    private Database db;
    
    /**
     * Creates new form EditMemory
     */
    public EditMemory() {
        initComponents();
        db = Database.getInstance();
        initializeMemoryTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        memoryScrollPane = new javax.swing.JScrollPane();
        memoryTable = new javax.swing.JTable();
        gotoMemoryLocationLabel = new javax.swing.JLabel();
        gotoMemoryLocationTextBox = new javax.swing.JTextField();
        gotoMemoryLocationButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Memory");

        memoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        memoryScrollPane.setViewportView(memoryTable);
        if (memoryTable.getColumnModel().getColumnCount() > 0) {
            memoryTable.getColumnModel().getColumn(0).setResizable(false);
            memoryTable.getColumnModel().getColumn(1).setResizable(false);
        }

        gotoMemoryLocationLabel.setText("Go to Memory Location:");

        gotoMemoryLocationTextBox.setText("3000");

        gotoMemoryLocationButton.setText("Go!");
        gotoMemoryLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoMemoryLocationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(memoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gotoMemoryLocationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gotoMemoryLocationTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gotoMemoryLocationButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gotoMemoryLocationLabel)
                    .addComponent(gotoMemoryLocationTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gotoMemoryLocationButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(memoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gotoMemoryLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotoMemoryLocationButtonActionPerformed
        String location = gotoMemoryLocationTextBox.getText();
        TableModel memoryTableModel = memoryTable.getModel();
        int index = -1;
        for (int i = memoryTable.getModel().getRowCount() - 1; i >= 0; i--) 
        {
            if (memoryTableModel.getValueAt(i, 0).equals(location)) 
            {
                index = i;
                break;
            }
        }
        memoryTable.getSelectionModel().setSelectionInterval(index, index);
        memoryTable.scrollRectToVisible(new Rectangle(memoryTable.getCellRect(index, 0, true)));
    }//GEN-LAST:event_gotoMemoryLocationButtonActionPerformed
    
    private void initializeMemoryTable()
    {
        Map<Integer, Byte> memory = db.getMemory();
        DefaultTableModel memoryTableModel = (DefaultTableModel)memoryTable.getModel();
        
        memoryTableModel.setRowCount(0);
        
        int i = 0;
        Object[] data = new Object[2];
        for (Map.Entry<Integer, Byte> entry : memory.entrySet())
        {
            data[0] = Integer.toHexString(entry.getKey());
            data[1] = Converter.byteToHex(entry.getValue(), 2);
            memoryTableModel.addRow(data);
            i++;
        } 
        
        memoryTableModel.addTableModelListener(new TableModelListener(){
            public void tableChanged(TableModelEvent e)
            {  
                String memoryValuePattern = "^[0-9A-Fa-f]{2}$";
                
                int row = e.getFirstRow();
                int col = e.getColumn();
                
                String value = (String)memoryTableModel.getValueAt(row, col);
                int memoryLocation = Converter.hexToInt((String)memoryTableModel.getValueAt(row, 0));
                Boolean success = false;
                if (value.matches(memoryValuePattern))
                {
                    value = value.replaceAll("\\s","");
                    byte memoryValue = Converter.hexToByte(value);
                    success = db.editMemory(memoryLocation, memoryValue);
                }
                
                if (!success)
                {
                    Map memory = db.getMemory();
                    String recoveryValue = Integer.toString(Database.DEFAULT_MEMORY_VALUE);
                    if(memory.containsKey(memoryLocation)) 
                    {
                        recoveryValue = Converter.byteToHex((byte)memory.get(memoryLocation), 2);
                    }
                    memoryTableModel.setValueAt(recoveryValue, row, col);
                }
            }
        });
        
        memoryTable.setModel(memoryTableModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton gotoMemoryLocationButton;
    private javax.swing.JLabel gotoMemoryLocationLabel;
    private javax.swing.JTextField gotoMemoryLocationTextBox;
    private javax.swing.JScrollPane memoryScrollPane;
    private javax.swing.JTable memoryTable;
    // End of variables declaration//GEN-END:variables
}
